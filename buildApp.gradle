GLog.d(project.toString() + " -> app")

apply {
    plugin "com.android.application"
    plugin "kotlin-android"
    plugin "kotlin-android-extensions"
    plugin "com.blankj.api"
}

android {
    compileSdkVersion Config.compileSdkVersion
    defaultConfig {
        applicationId Config.applicationId + suffix
        minSdkVersion Config.minSdkVersion
        targetSdkVersion Config.targetSdkVersion
        versionCode Config.versionCode
        versionName Config.versionName

        multiDexEnabled true

        resValue "string", "app_name", Config.appName + suffix
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        // exclude 在打包时移除项目中的相关文件，不打入apk文件中
        exclude 'META-INF/*'
    }

    dexOptions {
        // 是否预索引库。这会改善增量编译，但是会使得清理编译变得更慢。
        preDexLibraries true
        // 执行dx生成dex是临时设定的-Xmx值，示例： “2048m”。
        javaMaxHeapSize "8g"
        // 可用于dex的最大并发数，默认 4。
        maxProcessCount 8
        dexInProcess = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    // LeakCanary
    debugImplementation Config.depConfig.leakcanary.android.dep
    debugImplementation Config.depConfig.leakcanary.support_fragment.dep
    releaseImplementation Config.depConfig.leakcanary.android_no_op.dep

    // app 只依赖 pkg
    // 根据 Config.pkgConfig 来依赖所有 pkg
    for (def entrySet : ConfigUtils.getApplyPkgs().entrySet()) {
        api entrySet.value.dep
    }

    // app 只依赖 mock
    if (Config.depConfig.feature.mock.isApply) {
        api Config.depConfig.feature.mock.dep
    }
}


// 除了 launcher 以外，每个 applicationId 都是都是带有 feature 的模块名后缀的，
// 具体方法就是 getSuffix()，方便我们在手机上同时装多个应用。
def getSuffix() {
    if (project.path == ":feature:launcher:app") return ""
    return project.path.replace(":", "_").substring(":feature".length(), project.path.length() - ":app".length())
}